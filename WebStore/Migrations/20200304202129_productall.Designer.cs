// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebStore.Data;

namespace WebStore.Migrations
{
    [DbContext(typeof(WebStoreContext))]
    [Migration("20200304202129_productall")]
    partial class productall
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebStore.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnName("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Suited for light gaming and office use.",
                            FilePath = "/images/basicMonitor.jpg",
                            Genre = "Monitor",
                            Name = "Basic Monitor",
                            Price = 50.0
                        },
                        new
                        {
                            Id = 2,
                            Description = "This monitor delivers superior quality for gaming.",
                            FilePath = "/images/rgbaMonitor.jpg",
                            Genre = "Monitor",
                            Name = "RGB Monitor",
                            Price = 200.0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Suited for light gaming and office use.",
                            FilePath = "/images/basicKeyboard.png",
                            Genre = "Keyboard",
                            Name = "Basic Keyboard",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 4,
                            Description = "RGBA light capability. Suited for intense gaming.",
                            FilePath = "/images/rgbaKeyboard.jpg",
                            Genre = "Keyboard",
                            Name = "RGBA Keyboard",
                            Price = 90.0
                        },
                        new
                        {
                            Id = 5,
                            Description = "Premium speakers. Perfect for the complete in home speaker system.",
                            FilePath = "/images/rgbaSpeakers.jpg",
                            Genre = "Speakers",
                            Name = "A5+ Speakers",
                            Price = 500.0
                        },
                        new
                        {
                            Id = 6,
                            Description = "Great for small office sound.",
                            FilePath = "/images/basicSpeakers.jpg",
                            Genre = "Speakers",
                            Name = "Basic Speakers",
                            Price = 15.0
                        },
                        new
                        {
                            Id = 7,
                            Description = "Suited for light gaming and home use.",
                            FilePath = "/images/basicHeadphones.jpg",
                            Genre = "Headphones",
                            Name = "Basic Headphones",
                            Price = 15.0
                        },
                        new
                        {
                            Id = 8,
                            Description = "RGB Capability. Suited for intense gaming and delivering superior sound.",
                            FilePath = "/images/rgbHeadphone.jpg",
                            Genre = "Headphones",
                            Name = "RGB Headphones",
                            Price = 150.0
                        },
                        new
                        {
                            Id = 9,
                            Description = "Suited for light gaming and office use.",
                            FilePath = "/images/basicMouse.jpg",
                            Genre = "Mouse",
                            Name = "Basic Mouse",
                            Price = 14.0
                        },
                        new
                        {
                            Id = 10,
                            Description = "Perfect for low latency gameplay and plenty of gaming abuse. RGB!",
                            FilePath = "/images/rgbaMouse.jpg",
                            Genre = "Mouse",
                            Name = "RGBA Mouse",
                            Price = 90.0
                        },
                        new
                        {
                            Id = 11,
                            Description = "Suited for simple office use. Good for small day to day printing jobs.",
                            FilePath = "/images/basicPrinter.jpg",
                            Genre = "Printer",
                            Name = "Basic Printer",
                            Price = 25.0
                        },
                        new
                        {
                            Id = 12,
                            Description = "Suited for heavy printer jobs. High ink efficiency.",
                            FilePath = "/images/rgbaPrinter.jpg",
                            Genre = "Printer",
                            Name = "RGBA Printer",
                            Price = 450.0
                        },
                        new
                        {
                            Id = 13,
                            Description = "Suited for small sound for a small office or a quiet living room.",
                            FilePath = "/images/basicSoundbar.jpeg",
                            Genre = "Soundbar",
                            Name = "Basic Soundbar",
                            Price = 50.0
                        },
                        new
                        {
                            Id = 14,
                            Description = "Fancy lights and big sound. Perfect for shaking a room to an explosion in a movie like Transformers.",
                            FilePath = "/images/rgbaSoundbar.jpeg",
                            Genre = "Soundbar",
                            Name = "RGBA Soundbar",
                            Price = 500.0
                        },
                        new
                        {
                            Id = 15,
                            Description = "Takes lower resolution photos. Efficient on storage space.",
                            FilePath = "/images/basicCamera.jpeg",
                            Genre = "Camera",
                            Name = "Basic Camera",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 16,
                            Description = "Super high resolution photos with a huge sensor to take in all the light and shadows of a shot.",
                            FilePath = "/images/rgbaCamera.jpg",
                            Genre = "Camera",
                            Name = "RGBA Camera",
                            Price = 41000.0
                        },
                        new
                        {
                            Id = 17,
                            Description = "Mediocre file transfer speed. Great bang for buck.",
                            FilePath = "/images/basicFlashDrive.jpeg",
                            Genre = "Flashdrive",
                            Name = "Basic Flashdrive",
                            Price = 2.0
                        },
                        new
                        {
                            Id = 18,
                            Description = "SuPeR cOoL RGB Bro! Fast files! Bro! Bro guy man! Dude!",
                            FilePath = "/images/rgbaFlashDrive.jpg",
                            Genre = "Flashdrive",
                            Name = "RGBA Flash Drive",
                            Price = 18.0
                        },
                        new
                        {
                            Id = 19,
                            Description = "Medium color gamut and good sound.",
                            FilePath = "/images/basicTV.jpg",
                            Genre = "TV",
                            Name = "Basic TV",
                            Price = 200.0
                        },
                        new
                        {
                            Id = 20,
                            Description = "Super high nitz for a great brightness. Intense color gamut and plenty of sound..",
                            FilePath = "/images/rgbaTV.jpeg",
                            Genre = "TV",
                            Name = "RGBA TV",
                            Price = 10000.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
